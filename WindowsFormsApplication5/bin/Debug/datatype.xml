<?xml version="1.0" encoding="utf-8"?>
<grammar xml:lang="en-US" root="datatype" version="1.0" mode="voice" tag-format="semantics/1.0" xmlns="http://www.w3.org/2001/06/grammar">
<rule id="datatype">
<one-of>
	<item> using </item><item> "using System"</item>
	<item> delegate</item>
	<item> Console </item>
	<item> WriteLine </item>
	<item> ReadLine </item>
	<item> Convert </item>
	<item> namespace </item>
	<item> int </item>
	<item> char </item>
	<item> float </item>
	<item> double </item>
	<item> signed </item>
	<item> if </item>
	<item> else </item>
	<item> unsigned </item>
	<item> switch </item>
	<item> for </item>
	<item> while </item>
	<item> do </item>
	<item> case </item>
	<item> return </item>
	<item> String </item>
	<item> public </item>
	<item> static </item>
	<item> class </item>
	<item> enum </item>
	<item> new </item>
	<item> abstract </item>
	<item> event </item>
	<item> explicit </item>
	<item> implicit </item>
	<item> long </item>
	<item> private </item>
	<item> protected </item>
	<item> struct </item>
	<item> as </item>
	<item> null </item>
	<item> switch </item>
	<item> base </item>
	<item> extern </item>
	<item> object </item>
	<item> this </item>
	<item> bool </item>
	<item> false </item>
	<item> true </item>
	<item> operator </item>
	<item> throw </item>
	<item> try </item>
	<item> break </item>
	<item> finally </item>
	<item> out </item>
	<item> byte </item>
	<item> fixed </item>
	<item> override </item>
	<item> case </item>
	<item> params </item>
	<item> typeof </item>
	<item> catch </item>
	<item> uint </item>
	<item> foreach </item>
	<item> ulong </item>
	<item> checked </item>
	<item> goto </item>
	<item> unchecked </item>
	<item> readonly </item>
	<item> unsafe </item>
	<item> const </item>
	<item> ref </item>
	<item> ushort </item>
	<item> continue </item>
	<item> in </item>
	<item> decimal </item>
	<item> sbyte </item>
	<item> virtual </item>
	<item> default </item>
	<item> interface </item>
	<item> sealed </item>
	<item> volatile </item>
	<item> internal </item>
	<item> is </item>
	<item> sizeof </item>
	<item> while </item>
	<item> lock </item>
	<item> stackalloc </item>
</one-of>
</rule>
</grammar>